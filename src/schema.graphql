    type Query {
        me: User!
        users(query: String): [User]!
        post: Post!
        posts(query: String): [Post]!
        comments: [Comment]!
    }

    type Mutation {
        createUser(data: CreateUserInput): User!
        deleteUser(id:ID!): User!
        updateUser(id:ID! data: UpdateUserInput! ): User!
        createPost(data: CreatePostInput): Post!
        deletePost(id:ID!): Post!
        updatePost(id:ID! data: UpdatePostInput): Post!
        createComment(data: CreateCommentInput): Comment!
        deleteComment(id:ID!): Comment!
        updateComment(id: ID! data:UpdateCommentInput): Comment!
    }
    type Subscription {
        newComment(postID: ID!): Comment!,
        newPost: Post!
    }
    input CreateCommentInput {
        text: String!, 
        author: ID!, 
        post: ID!
    }
    input UpdateCommentInput {
        text: String
    }

    input CreatePostInput {
        title: String!, 
        body: String!, 
        published: Boolean!, 
        author: ID! 
    }

    input UpdatePostInput {
        title: String, 
        body: String, 
        published: Boolean, 
        author: ID 
    }

    input CreateUserInput {
        name:String!, 
        email: String!, 
        age: Int
    }
    input UpdateUserInput {
        name:String, 
        email: String, 
        age: Int
    }

    type User{
        id: ID
        name: String!
        email: String!
        age: Int
        posts:[Post]!
        comments: [Comment]!
    }
    type Post{
        id: ID!
        title: String!
        body: String!
        published: Boolean!
        author: User!
        comments: [Comment]!
    }
    type Comment{
        id: ID!
        text: String!
        author: User!
        post: Post!
    }